name: TEST_DEV

on:
  push:
    branches:
      - dev_ai_code_branch
  workflow_dispatch:

jobs:
  test-dev-environment:
    runs-on: ubuntu-latest
    environment: testsecrets
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test environment variables
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_NAME_BT: ${{ secrets.DB_NAME_BT }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_URL: ${{ secrets.DB_URL }}
        CMC_API_KEY: ${{ secrets.CMC_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        echo "üîç Testing environment variable loading..."
        echo "DB_HOST: ${DB_HOST:0:10}..." # Show only first 10 chars for security
        echo "DB_NAME: $DB_NAME"
        echo "DB_PORT: $DB_PORT"
        echo "CMC_API_KEY: ${CMC_API_KEY:0:8}..." # Show only first 8 chars
        echo "Branch: $GITHUB_REF_NAME"
        echo "Repository: $GITHUB_REPOSITORY"
        echo "‚úÖ Environment variables loaded successfully"
    
    - name: Test database connection
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_PORT: ${{ secrets.DB_PORT }}
      run: |
        python -c "
        import os
        import psycopg2
        from dotenv import load_dotenv
        
        print('üîó Testing database connection...')
        
        try:
            conn = psycopg2.connect(
                host=os.getenv('DB_HOST'),
                database=os.getenv('DB_NAME'),
                user=os.getenv('DB_USER'),
                password=os.getenv('DB_PASSWORD'),
                port=os.getenv('DB_PORT', '5432')
            )
            
            cursor = conn.cursor()
            cursor.execute('SELECT version()')
            version = cursor.fetchone()[0]
            print(f'‚úÖ Database connection successful')
            print(f'üìä PostgreSQL version: {version[:50]}...')
            
            cursor.execute('SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = %s', ('public',))
            table_count = cursor.fetchone()[0]
            print(f'üìã Tables in public schema: {table_count}')
            
            cursor.close()
            conn.close()
            print('‚úÖ Database connection test completed successfully')
            
        except Exception as e:
            print(f'‚ùå Database connection failed: {str(e)}')
            raise
        "
    
    - name: Run CMC Listings Script (TEST)
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_NAME_BT: ${{ secrets.DB_NAME_BT }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_URL: ${{ secrets.DB_URL }}
        CMC_API_KEY: ${{ secrets.CMC_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        echo "üöÄ Running CMC Listings script for testing..."
        python gcp_postgres_sandbox/cmc_listings.py
        echo "‚úÖ CMC Listings script completed successfully"
    
    - name: Verify data write
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_PORT: ${{ secrets.DB_PORT }}
      run: |
        python -c "
        import os
        import psycopg2
        from datetime import datetime
        
        print('üìä Verifying data was written to database...')
        
        try:
            conn = psycopg2.connect(
                host=os.getenv('DB_HOST'),
                database=os.getenv('DB_NAME'),
                user=os.getenv('DB_USER'),
                password=os.getenv('DB_PASSWORD'),
                port=os.getenv('DB_PORT', '5432')
            )
            
            cursor = conn.cursor()
            
            # Check if crypto_listings table exists and has data
            cursor.execute('''
                SELECT COUNT(*) FROM information_schema.tables 
                WHERE table_name = 'crypto_listings' AND table_schema = 'public'
            ''')
            table_exists = cursor.fetchone()[0] > 0
            
            if table_exists:
                cursor.execute('SELECT COUNT(*) FROM crypto_listings')
                record_count = cursor.fetchone()[0]
                print(f'‚úÖ Table crypto_listings exists with {record_count} records')
                
                # Get latest record info
                cursor.execute('SELECT MAX(last_updated) FROM crypto_listings')
                latest_update = cursor.fetchone()[0]
                print(f'üìÖ Latest update timestamp: {latest_update}')
            else:
                print('‚ö†Ô∏è  Table crypto_listings not found, checking for other listing tables...')
                cursor.execute('''
                    SELECT table_name FROM information_schema.tables 
                    WHERE table_name LIKE '%listing%' AND table_schema = 'public'
                ''')
                listing_tables = cursor.fetchall()
                print(f'üìã Found listing tables: {[t[0] for t in listing_tables]}')
            
            cursor.close()
            conn.close()
            print('‚úÖ Data verification completed')
            
        except Exception as e:
            print(f'‚ùå Data verification failed: {str(e)}')
            raise
        "
    
    - name: Test Summary
      run: |
        echo "üéâ TEST_DEV Workflow Summary:"
        echo "‚úÖ Environment variables loaded successfully"
        echo "‚úÖ Database connection established"
        echo "‚úÖ CMC Listings script executed"
        echo "‚úÖ Data write verification completed"
        echo ""
        echo "üöÄ Dev branch is ready for production merge!"
        echo "Branch: $GITHUB_REF_NAME"
        echo "Commit: $GITHUB_SHA"
        echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"