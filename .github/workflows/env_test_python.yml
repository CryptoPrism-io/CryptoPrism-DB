name: Environment Test - Python

on:
  # Allow manual triggering for testing
  workflow_dispatch:
  
  # Optional: Run on schedule (daily at 6 AM UTC)
  schedule:
    - cron: '0 6 * * *'
  
  # Optional: Run on push to main branches for CI validation
  push:
    branches:
      - main
      - dev_ai_code_branch

jobs:
  python-env-test:
    runs-on: ubuntu-latest
    environment: python_sql_gemini_figma_gcp
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Python environment test
      env:
        # Database configuration
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_NAME_BT: ${{ secrets.DB_NAME_BT }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_URL: ${{ secrets.DB_URL }}
        
        # API Keys
        CMC_API_KEY: ${{ secrets.CMC_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        
        # Telegram configuration
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        echo "üß™ Starting Python Environment Test..."
        python gcp_postgres_sandbox/test_scrtipts/funtional_tests/env_test.py
    
    - name: Log test completion
      if: success()
      run: |
        echo "‚úÖ Python environment test completed successfully at $(date)"
        echo "üéâ All Python environment variables and database connections are working!"
    
    - name: Log test failure
      if: failure()
      run: |
        echo "‚ùå Python environment test failed at $(date)"
        echo "‚ö†Ô∏è Check the logs above for missing environment variables or connection issues"
        exit 1